<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="project.singasong.playlistSong.repository.PlaylistSongRepository">

    <select id="findByPlaylistId" parameterType="project.singasong.playlistSong.dto.PlaylistSongPagingDto" resultType="project.singasong.playlistSong.dto.PlaylistSongPagingDto">
        SELECT
            p.song_id as songId,
            p.playlist_id as playlistId,
            s.title as title,
            s.singer as singer,
            s.song_no as songNo,
            s.brand as brand
        FROM playlist_song p
        JOIN song s on p.song_id = s.id
        WHERE p.playlist_id = #{playlistId} AND song_id > #{offset}
        ORDER BY p.song_id ASC
        LIMIT #{limit}
    </select>

    <select id="findByPlaylistIdAndSongId" parameterType="project.singasong.playlistSong.domain.PlaylistSong" resultType="project.singasong.playlistSong.domain.PlaylistSong">
        SELECT
            song_id,
            playlist_id
        FROM playlist_song
        WHERE playlist_id = #{playlistId}
            AND song_id = #{songId}
    </select>

    <select id="findByPlaylistIdAndLike" parameterType="project.singasong.playlistSong.dto.PlaylistSongPagingDto" resultType="project.singasong.playlistSong.dto.PlaylistSongPagingDto">
        SELECT
            ps.song_id AS songId,
            ps.playlist_id AS playlistId,
            s.title AS title,
            s.singer AS singer,
            s.song_no AS songNo,
            s.brand AS brand,
            li.likeCnt AS isLike
        FROM playlist_song ps
        JOIN song s ON ps.song_id = s.id
        JOIN playlist p ON ps.playlist_id = p.id
        LEFT JOIN (
                SELECT
                    l.user_id, l.song_id, COUNT(1) AS likeCnt
                FROM likes l
                JOIN member m ON l.user_id = m.id
                JOIN song s ON l.song_id = s.id
                GROUP BY l.song_id, l.user_id
            ) li ON ps.song_id = li.song_id AND p.user_id = li.user_id
        WHERE ps.playlist_id = #{playlistId} AND ps.song_id > #{offset}
        ORDER BY ps.song_id ASC
        LIMIT #{limit}
    </select>

    <insert id="create" parameterType="project.singasong.playlistSong.domain.PlaylistSong" useGeneratedKeys="true" keyColumn="songId">
        INSERT INTO playlist_song(
            song_id,
            playlist_id
        ) VALUES (
            #{songId},
            #{playlistId}
        )
    </insert>

    <delete id="delete" parameterType="java.lang.Long">
        DELETE FROM playlist_song
        WHERE playlist_id = #{playlistId} AND song_id = #{songId}
    </delete>

</mapper>